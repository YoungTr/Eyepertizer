plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

apply from: '../gradle/doraemonkit.gradle'

android {
    compileSdkVersion androids.compileSdkVersion
    buildToolsVersion androids.buildToolsVersion

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    defaultConfig {
        applicationId "com.eyepertizer.androidx"
        minSdkVersion androids.minSdkVersion
        targetSdkVersion androids.targetSdkVersion
        versionCode androids.versionCode
        versionName androids.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters "arm64-v8a"
        }

        resConfigs "en", "zh-rCN"
    }

    buildTypes {
        release {
            // 是否开启混淆
            minifyEnabled true
            // 开启 zipAlign 可以让安装包中的资源按 4 字节对齐
            // 这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            // 移除无用资源
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    android.applicationVariants.all { variant ->
        def appName = APP_NAME
        def versionName = "${variant.versionName}"
        variant.outputs.all { output ->
            outputFileName = "${appName}_${versionName}_${variant.buildType.name}.apk"
        }
    }

    aaptOptions {
        // 在Android的构建流程中，AAPT会使用内置的
        // 压缩算法来优化res/drawable/目录下的PNG图片，
        // 但这可能会导致本来已经优化过的图片体积变大，
        // 因此需要禁止AAPT来优化PNG图片
        cruncherEnabled = false
    }
}

dependencies {

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    depends.each { k, v -> implementation v }
    debugImplementationDependencies.each { k, v -> debugImplementation v }

    kapts.each { k, v -> kapt v }

    implementation 'com.dianping.android.sdk:logan:1.2.4'


}

apply from: '../bytex.gradle'
apply from: '../andResGuard.gradle'