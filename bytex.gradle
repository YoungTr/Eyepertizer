apply plugin: 'bytex.const_inline'

def enable_bytex = false

const_inline {
    enable enable_bytex
    enableInDebug true
    logLevel "INFO"
    autoFilterReflectionField = true  //使用插件内置的反射检查过滤掉可能的反射常量，建议为true
    //supposesReflectionWithString = false //使用插件内置字符串匹配可能反射常量，建议为false
    skipWithRuntimeAnnotation true //过滤掉带有运行时注解的常量，推荐true
    skipWithAnnotations = [
            //过滤掉被注解注释过的常量，包含class
            "android/support/annotation/Keep",
    ]
    whiteList = [
            //跳过优化的名单
            "com/meizu/cloud/*",
    ]
}

apply plugin: 'bytex.field_assign_opt'
field_assign_opt {
    enable enable_bytex
    enableInDebug false
    logLevel "INFO"
    removeLineNumber true // 同时移除赋值对应的行号信息(如果有的话),默认true。
    whiteList = [
            //白名单，ClassName.FieldName 。不支持模式匹配
            //"android.support.constraint.solver.ArrayRow.isSimpleDefinition"
    ]
}

apply plugin: 'bytex.method_call_opt'
method_call_opt {
    enable enable_bytex //建议开发模式关闭
    enableInDebug false
    logLevel "DEBUG"
    //是否在log中显示删除方法调用指令后的方法指令，一般调试时使用
    showAfterOptInsLog false
    //需要删除的方法配置
    methodList = [
            //下面的每一项配置必须严格按照数据配置，一个地方不对这一项不生效。
            //class#method#desc
            "android/util/Log#v#(Ljava/lang/String;Ljava/lang/String;)I",
            "android/util/Log#v#(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I",
            "android/util/Log#d#(Ljava/lang/String;Ljava/lang/String;)I",
            "android/util/Log#d#(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I",
            "android/util/Log#i#(Ljava/lang/String;Ljava/lang/String;)I",
            "android/util/Log#i#(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I",
            "android/util/Log#w#(Ljava/lang/String;Ljava/lang/String;)I",
            "android/util/Log#w#(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I",
            "android/util/Log#e#(Ljava/lang/String;Ljava/lang/String;)I",
            "android/util/Log#e#(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I",
            "android/util/Log#println#(ILjava/lang/String;Ljava/lang/String;)I",

            "java/lang/Throwable#printStackTrace#()V",
            "com/google/devtools/build/android/desugar/runtime/ThrowableExtension#printStackTrace#(Ljava/lang/Throwable;)V",

            //还有自己项目中封装的Logger方法
            "com/eyepertizer/androidx/util/LogKt#logV#(Ljava/lang/String;Ljava/lang/String;)V",
            "com/eyepertizer/androidx/util/LogKt#logD#(Ljava/lang/String;Ljava/lang/String;)V",
            "com/eyepertizer/androidx/util/LogKt#logI#(Ljava/lang/String;Ljava/lang/String;)V",
            "com/eyepertizer/androidx/util/LogKt#logW#(Ljava/lang/String;Ljava/lang/String;)V",
            "com/eyepertizer/androidx/util/LogKt#logE#(Ljava/lang/String;Ljava/lang/String;)V"
    ]
    onlyCheckList = [
            //"com/ss/*",
            //"com/bytedance/*"
    ]

    whiteList = [
            "com/facebook/stetho*",
    ]
}

//apply plugin: 'bytex.getter_setter_inline'
//getter_setter_inline {
//    enable true
//    enableInDebug false
//    logLevel "DEBUG"
//    // 跳过Proguard的Keep规则，强制内联这些包名下的类的getter/setter方法
//    shouldInline = [
//            "com/ss/android/ugc/bytex/example/getter_setter/"
//    ]
//    // 除了可以通过Proguard的keep规则来避免一些方法被内联外，还可以自定义一些注解，标注到这些方法上
//    keepWithAnnotations = [
//            "com/ss/android/ugc/bytex/example/CalledByNative"
//    ]
//}

//apply plugin: 'bytex.shrink_r_class'
//shrinkR {
//    enable true
//    enableInDebug false
//    logLevel "DEBUG"
//    keepList = [
//            // keep android.support.constraint.R里所有id
//            "android.support.constraint.R.id",
//            // keep 所有以im_e为前缀的drawable字段
//            "R.drawable.im_e+",
//    ]
//    resCheck {
//        enable true // 无用资源检查的开关
//        // 根据资源所在的路径做模糊匹配（因为第三方库用到的冗余资源没法手动删）
//        onlyCheck = [
//                // 只检查主工程里的资源
//                "app/build"
//        ]
//        // 检查白名单。这些资源就算是冗余资源也不会report出来
//        keepRes = [
//                "R.drawable.ic_list_dou_order",
//                "R.string.snapchat_tiktok_client_id",
//                "R.string.snapchat_musically_client_id",
//                "R.string.fb_account_kit_client_token",
//                "R.string.mapbox_*",
//                "R.string.kakao*",
//                "R.dimen",
//                "R.color",
//                "R.animator",
//                "R.integer",
//                "R.bool",
//                "R.style",
//                "R.styleable",
//                "R.attr",
//                "R.xml",
//                "R.array",
//                "R.string"
//        ]
//    }
//
//    assetsCheck {
//        enable true // 冗余assets资源检查开关
//        keepBySuffix = [
//                ".model",
//                ".otf",
//                ".ttf"
//        ]
//        keepAssets = [
//                "start_anim/",
//                "Contour_2D/",
//        ]
//    }
//}

apply plugin: 'McImage'

McImageConfig {
    isCheckSize true // 是否检测图片大小，默认为true
    optimizeType "ConvertWebp"
    // 优化类型，可选"ConvertWebp"，"Compress"，转换为webp或原图压缩，默认Compress，使用ConvertWep需要min sdk >= 18.但是压缩效果更好
    maxSize 1 * 1024 * 1024 // 大图片阈值，default 1MB
    enableWhenDebug false // debug下是否可用，default true
    isCheckPixels false // 是否检测大像素图片，default true
    maxWidth 2000 // default 1000 如果开启图片宽高检查，默认的最大宽度
    maxHeight 2500 // default 1000 如果开启图片宽高检查，默认的最大高度
    whiteList = [ // 默认为空，如果添加，对图片不进行任何处理
                  "icon_launcher.png",
                  "exo_ic_default_album_image.png"
    ]
    mctoolsDir "$rootDir"
    isSupportAlphaWebp false  // 是否支持带有透明度的webp，default false,带有透明图的图片会进行压缩
    multiThread true  // 是否开启多线程处理图片，default true
    bigImageWhiteList = [
            "exo_ic_default_album_image.png"
    ] // 默认为空，如果添加，大图检测将跳过这些图片
}